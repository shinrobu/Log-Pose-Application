import 'package:firebase_auth/firebase_auth.dart';
import 'package:log_pose/main.dart';
import 'package:log_pose/util/reusableWidgets.dart';
import 'package:flutter/material.dart';
import 'package:firebase_database/firebase_database.dart';

class SignUpScreen extends StatefulWidget {
  const SignUpScreen({Key? key}) : super(key: key);

  @override
  State<SignUpScreen> createState() => _SignUpScreenState();
}

class _SignUpScreenState extends State<SignUpScreen> {
  // Text controllers for signup
  TextEditingController _passwordTextController = TextEditingController();
  TextEditingController _emailTextController = TextEditingController();
  TextEditingController _userNameTextController = TextEditingController();
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: const Text(
          "Sign Up",
          style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
        ),
      ),
      body: Container(
          width: MediaQuery.of(context).size.width,
          height: MediaQuery.of(context).size.height,
          decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                Color(0xFFFFB56B),
                Color(0xFFA6C9B4),
              ], begin: Alignment.topCenter, end: Alignment.bottomCenter)),
          child: SingleChildScrollView(
              physics: const NeverScrollableScrollPhysics(),
              child: Padding(
                padding: EdgeInsets.fromLTRB(20, 120, 20, 0),
                child: Column(
                  children: <Widget>[
                    const SizedBox(
                      height: 20,
                    ),
                    reusableTextField("Name", Icons.person_outline, false,
                        _userNameTextController),
                    const SizedBox(
                      height: 20,
                    ),
                    reusableTextField("Email", Icons.person_outline, false,
                        _emailTextController),
                    const SizedBox(
                      height: 20,
                    ),
                    reusableTextField("Password", Icons.lock_outlined, true,
                        _passwordTextController),
                    const SizedBox(
                      height: 20,
                    ),
                    firebaseUIButton(context, "Sign Up", () {
                      // Create an account in the database using the text fields
                      FirebaseAuth.instance
                          .createUserWithEmailAndPassword(
                          email: _emailTextController.text,
                          password: _passwordTextController.text)
                          .then((value) {
                          var userID = FirebaseAuth.instance.currentUser?.uid;

                          // Creating a new user in the database
                          FirebaseDatabase.instance.ref().child("users/" + userID!).set(
                              {
                                "name": _userNameTextController.text
                              }
                          );
                          var timestamp = DateTime.now().millisecondsSinceEpoch;

                          // New unique task IDs  generated by putting a timestamp after task creation
                          FirebaseDatabase.instance.ref().child("users/" + userID! + "/tasks/task" + timestamp.toString()).set(
                              {
                                "name": "Your first task!",
                                "complete": false
                              });
                          print("Created New Account");

                          // Refresh app state
                          if(mounted) {
                            setState(() {

                            });
                          }

                          //Go back to home page
                          Navigator.pushNamedAndRemoveUntil(context, "/homepage",  (Route<dynamic> route) => false);
                      }).onError((error, stackTrace) {
                        print("Error ${error.toString()}");
                      });
                    })
                  ],
                ),
              ))),
    );
  }
}